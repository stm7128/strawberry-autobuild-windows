name: Daily Build and Release

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

jobs:
  build-windows-msvc:
    name: Build Windows MSVC
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [ 'x86_64' ]
        buildtype: [ 'release' ]
    steps:
      - name: Set prefix path
        shell: bash
        run: |
          echo "prefix_path_backslash=c:\strawberry_msvc_${{matrix.arch}}_${{matrix.buildtype}}" >> $GITHUB_ENV
          echo "prefix_path_forwardslash=c:/strawberry_msvc_${{matrix.arch}}_${{matrix.buildtype}}" >> $GITHUB_ENV
          echo "prefix_path_unix=/c/strawberry_msvc_${{matrix.arch}}_${{matrix.buildtype}}" >> $GITHUB_ENV

      - name: Set cmake buildtype
        shell: bash
        run: echo "cmake_buildtype=$(echo ${{matrix.buildtype}} | sed 's/.*/\u&/')" >> $GITHUB_ENV

      - name: Cleanup PATH
        uses: egor-tensin/cleanup-path@v4
        with:
          dirs: ${{env.prefix_path_backslash}}\bin;C:\Windows;C:\Windows\system32;C:\Program Files\Git\bin;C:\Program Files\CMake\bin;C:\Program Files\GitHub CLI;C:\ProgramData\Chocolatey\bin;C:\Program Files (x86)\NSIS

      - name: Create downloads directory
        shell: cmd
        run: mkdir downloads

      - name: Download Windows MSVC dependencies
        shell: cmd
        working-directory: downloads
        run: curl -f -O -L https://github.com/strawberrymusicplayer/strawberry-msvc-dependencies/releases/latest/download/strawberry-msvc-${{matrix.arch}}-${{matrix.buildtype}}.tar.xz

      - name: Extract Windows MSVC dependencies
        shell: bash
        working-directory: downloads
        run: tar -C /c -xf strawberry-msvc-${{matrix.arch}}-${{matrix.buildtype}}.tar.xz

      - name: Update PATH
        run: echo "${{env.prefix_path_backslash}}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Copy bin files
        shell: bash
        run: cp /c/strawberry/c/bin/{patch.exe,strip.exe,strings.exe,objdump.exe} ${{env.prefix_path_unix}}/bin

      - name: Delete conflicting files
        shell: bash
        run: rm -rf /c/{msys64,mingw32,mingw64} /c/strawberry/c "/c/program files/OpenSSL"

      - name: Delete conflicting icu
        shell: bash
        run: find "/c/program files (x86)/windows kits/" -type f \( -iname 'icu*.lib' -o -iname 'icu*.h' \) -print -delete

      - name: Download NSIS LockedList plugin
        shell: cmd
        working-directory: downloads
        run: curl -f -O -L https://nsis.sourceforge.io/mediawiki/images/d/d3/LockedList.zip

      - name: Extract NSIS LockedList plugin
        shell: cmd
        working-directory: downloads
        run: 7z x LockedList.zip

      - name: Download NSIS Registry plugin
        shell: cmd
        working-directory: downloads
        run: curl -f -O -L https://nsis.sourceforge.io/mediawiki/images/4/47/Registry.zip

      - name: Extract NSIS Registry plugin
        shell: cmd
        working-directory: downloads
        run: 7z x Registry.zip

      - name: Download NSIS Inetc plugin
        shell: cmd
        working-directory: downloads
        run: curl -f -O -L https://nsis.sourceforge.io/mediawiki/images/c/c9/Inetc.zip

      - name: Extract NSIS Inetc plugin
        shell: cmd
        working-directory: downloads
        run: 7z x Inetc.zip

      - name: Install NSIS plugins
        shell: cmd
        working-directory: downloads
        run: |
          copy "Plugins\LockedList64.dll" "C:\Program Files (x86)\NSIS\Plugins\"
          copy "Plugins\x86-unicode\LockedList.dll" "C:\Program Files (x86)\NSIS\Plugins\x86-unicode\"
          copy "Desktop\Plugin\registry.dll" "C:\Program Files (x86)\NSIS\Plugins\"
          copy "Desktop\Plugin\registry.dll" "C:\Program Files (x86)\NSIS\Plugins\x86-unicode\"
          copy "Plugins\x86-unicode\INetC.dll" "C:\Program Files (x86)\NSIS\Plugins\x86-unicode\"

      - name: Setup MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.arch}}
          sdk: 10.0.20348.0
          vsversion: 2022

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Add safe git directory
        shell: bash
        run: git config --global --add safe.directory ${GITHUB_WORKSPACE}

      - name: Create Build Environment
        shell: cmd
        run: cmake -E make_directory build

      - name: Set ENABLE_WIN32_CONSOLE (release)
        if: matrix.buildtype == 'release'
        shell: bash
        run: echo "win32_console=OFF" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: strawberrymusicplayer/strawberry
          fetch-depth: 0
          submodules: recursive

      - name: Patching
        shell: bash
        run: |
          curl -L -o replaceupdatelink.diff https://github.com/stm7128/strawberry-build-windows/raw/main/replaceupdatelink.diff
          patch -p1 < ./replaceupdatelink.diff
          

      - name: Create Build Environment
        run: cmake -E make_directory build

      - name: Run CMake
        run: >
            cmake
            -S .
            -B build
            -DCMAKE_TOOLCHAIN_FILE="../cmake/Toolchain-${{matrix.arch}}-msvc.cmake"
            -DCMAKE_BUILD_TYPE="${{matrix.buildtype}}"
            -DCMAKE_PREFIX_PATH="C:/msvc-strawberry-${{matrix.arch}}-vs-17/qt"
            -DBUILD_WITH_QT6=ON
            -DBUILD_WERROR=OFF
            -DARCH="${{matrix.arch}}"
            -DENABLE_WIN32_CONSOLE=$(test "${{matrix.buildtype}}" = "debug" && echo "ON" || echo "OFF")
            -DENABLE_DBUS=OFF
            -DENABLE_LIBGPOD=OFF
            -DENABLE_LIBMTP=ON
            -DENABLE_AUDIOCD=ON
            -DENABLE_SPOTIFY=OFF


      - name: Run MSBuild
        run: cmake --build build --config "${{matrix.buildtype}}" --parallel $(nproc)

      - name: List files
        working-directory: build
        run: ls

      - name: Copy binaries
        working-directory: build
        run: cp /msvc-strawberry-${{matrix.arch}}-vs-17/bin/{sqlite3.exe,libsoup-3.0-0.dll,libnghttp2.dll} .

      - name: Build Windows installer
        working-directory: build
        run: makensis strawberry.nsi

      - name: Upload MSVC Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: msvc-build-artifacts-${{matrix.arch}}-${{matrix.buildtype}}
          path: build

  release:
    needs: [ build-windows-msvc ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download MSVC Artifacts
        uses: actions/download-artifact@v3
        with:
          name: msvc-build-artifacts-x86_64-release
          path: msvc-artifacts

      - name: Get current date
        id: get-date
        run: echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: daily-build-${{ env.CURRENT_DATE }}-${{ github.sha }}
          release_name: Daily Build-${{ env.CURRENT_DATE }}-${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload MSVC Artifacts to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: msvc-artifacts/build
          asset_name: windows-msvc-x86_64-${{ env.CURRENT_DATE }}-${{ github.sha }}.zip
          asset_content_type: application/zip
